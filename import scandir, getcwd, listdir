[1mdiff --git a/Algorithm_BKP_Quantum_Solution/main.py b/Algorithm_BKP_Quantum_Solution/main.py[m
[1mindex 1ae34fe..cbeae9d 100644[m
[1m--- a/Algorithm_BKP_Quantum_Solution/main.py[m
[1m+++ b/Algorithm_BKP_Quantum_Solution/main.py[m
[36m@@ -1,23 +1,6 @@[m
 # -*- coding: utf-8 -*-[m
 #!/usr/bin/python[m
 [m
[31m-#necessary packages [m
[31m-[m
[31m-import argparse[m
[31m-[m
[31m-DESCRIPTION_TEXT = "This program execute and analize a set of data with information about a knapsack every file; the information of a file is read and with an algorithm that emaule the functionality of a quantum computer"[m
[31m-[m
[31m-parser = argparse.ArgumentParser(description=DESCRIPTION_TEXT)[m
[31m-parser.add_argument("-i", "--iterations", help="Number of iterations to run each file with a knapsack")[m
[31m-args = parser.parse_args()[m
[31m-[m
[31m-num_iterations = 0[m
[31m-[m
[31m-if args.iterations:[m
[31m-    num_iterations = int(args.iterations)[m
[31m-else:[m
[31m-    num_iterations = 20[m
[31m-[m
 #necessary packages [m
 from qiskit.aqua.input import EnergyInput[m
 from qiskit.aqua.algorithms import ExactEigensolver[m
[36m@@ -33,50 +16,33 @@[m [mimport modules.util.generalValue as general[m
 from modules.generator.datasetGenerator import DatasetGenerator[m
 from modules.evaluator.datasetEvaluator import DatasetEvaluator[m
 [m
[31m-[m
[31m-[m
 from modules.file.fileWriter import FileWriter[m
 from os import listdir, path[m
 [m
 # Manage list directory[m
 ROOT_DIR = path.dirname(path.abspath(__file__))[m
[31m-list_folder_dataset_generated = listdir(ROOT_DIR + general.FOLDER_DATASET_GENERATED)[m
[31m-print(ROOT_DIR)[m
[31m-print(ROOT_DIR + general.FOLDER_DATASET_GENERATED)[m
[31m-[m
[31m-[m
[31m-files_fn = ["f3.txt", "f2.txt", "f8.txt", "f6.txt", "f9.txt", "f5.txt",  "f11.txt", "f10.txt", "f4.txt", "f7.txt", "f1.txt"][m
[31m-[m
[31m-def get_list_files_folder(ruta = getcwd()):[m
[31m-    """lista los archivos existentes en una ruta determinada"""[m
[31m-    return [arch.name for arch in scandir(ruta) if arch.is_file()][m
 [m
[32m+[m[32mlist_folder_dataset_generated = listdir(ROOT_DIR + general.FOLDER_DATASET_GENERATED)[m
 # listar las carpetas contenidas en el directorio[m
 list_folder_dataset_generated = listdir(FOLDER_DATASET_GENERATED)[m
 [m
[31m-def complete_objetive_and_solution():[m
[31m-    for folder_name in list_folder_dataset_generated:[m
[31m-        list_files = get_list_files_folder(FOLDER_DATASET_GENERATED + folder_name)[m
[31m-        print(list_files)[m
[31m-        for i in list_files:[m
[31m-            obj_kp = fileReader.read_file_knapsack(FOLDER_DATASET_GENERATED + folder_name + "/" + i) [m
[31m-            print(obj_kp)[m
[31m-[m
[31m-complete_objetive_and_solution()[m
[31m-[m
 menu = Menu(general.DESCRIPTION_TEXT, general.EPILOG_TEXT) # instance to manage program menu[m
[31m-obj_fileWriter  = FileWriter()[m
[31m-[m
 num_iterations = int(menu.getIterations()) if (menu.getIterations() is not None) else general.NUM_ITERATIONS_STATIC[m
[31m-[m
[31m-run_quantum_algorithm()[m
[32m+[m[32mobj_fileWriter  = FileWriter()[m
 [m
 #instance to manage program generator dataset[m
 generator = DatasetGenerator(1000)[m
[31m-[m
 #instance to manage program evaluator dataset[m
 evaluator = DatasetEvaluator()[m
 [m
[32m+[m[32mdef complete_objetive_and_solution():[m
[32m+[m[32m    for folder_name in list_folder_dataset_generated:[m
[32m+[m[32m        list_files = util.get_list_files_folder(FOLDER_DATASET_GENERATED + folder_name)[m
[32m+[m[32m        print(list_files)[m
[32m+[m[32m        for i in list_files:[m
[32m+[m[32m            obj_kp = fileReader.read_file_knapsack(FOLDER_DATASET_GENERATED + folder_name + "/" + i)[m[41m [m
[32m+[m[32m            print(obj_kp)[m
[32m+[m
 if(menu.is_generated_data()):[m
     generator.generate()[m
     print("Successfully generated dataset")[m
[36m@@ -92,7 +58,6 @@[m [mif(menu.is_generate_evaluate()):[m
 [m
 def run_quantum_algorithm():[m
     try:[m
[31m-        print("running...")[m
         obj_fileWriter.open(util.get_result_file_name())[m
         obj_fileWriter.write(util.get_line_header(num_iterations))[m
         obj_fileWriter.new_line()[m
[36m@@ -144,4 +109,11 @@[m [mdef run_quantum_algorithm():[m
         print("Execution error")[m
     finally:[m
         print("Execution finished")[m
[31m-        obj_fileWriter.close()[m
\ No newline at end of file[m
[32m+[m[32m        obj_fileWriter.close()[m
[32m+[m
[32m+[m
[32m+[m[32m#program init[m
[32m+[m[32mprint("running...")[m
[32m+[m[32mcomplete_objetive_and_solution()[m
[32m+[m[32mrun_quantum_algorithm()[m
[32m+[m[32mprint("finish...")[m
[1mdiff --git a/Algorithm_BKP_Quantum_Solution/modules/knapsack/knapsack.py b/Algorithm_BKP_Quantum_Solution/modules/knapsack/knapsack.py[m
[1mindex 5b110ad..a9d773f 100644[m
[1m--- a/Algorithm_BKP_Quantum_Solution/modules/knapsack/knapsack.py[m
[1m+++ b/Algorithm_BKP_Quantum_Solution/modules/knapsack/knapsack.py[m
[36m@@ -6,7 +6,7 @@[m [mclass Knapsack:[m
     def __init__(self, n, capacity):[m
         """ Information about of knapsack """[m
         self.n_items = n[m
[31m-        self.capacity = capacity        [m
[32m+[m[32m        self.capacity = capacity[m
         self.items = [][m
         self.objetive = 0[m
         self.solution = [][m
[1mdiff --git a/Algorithm_BKP_Quantum_Solution/modules/util/util.py b/Algorithm_BKP_Quantum_Solution/modules/util/util.py[m
[1mindex 5b99ce6..0e7f5fd 100644[m
[1m--- a/Algorithm_BKP_Quantum_Solution/modules/util/util.py[m
[1m+++ b/Algorithm_BKP_Quantum_Solution/modules/util/util.py[m
[36m@@ -28,6 +28,10 @@[m [mdef get_result_file_name():[m
 def fill_spaces(value, tamanio):[m
     return str(value).ljust(tamanio)[:tamanio][m
 [m
[32m+[m[32mdef get_list_files_folder(ruta = getcwd()):[m
[32m+[m[32m    """lista los archivos existentes en una ruta determinada"""[m
[32m+[m[32m    return [arch.name for arch in scandir(ruta) if arch.is_file()][m
[32m+[m
 def get_line_header(iterations):[m
     line = f"Number of iterations: {iterations} \n"[m
     line += "n-items | capacity | objetive value | max profit | min profit | average profit | max capacity | min capacity | average capacity | "[m
